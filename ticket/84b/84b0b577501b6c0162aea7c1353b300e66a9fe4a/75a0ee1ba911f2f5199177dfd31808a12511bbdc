Index: group/utils.py
===================================================================
--- group/utils.py	(revision 5513)
+++ group/utils.py	(working copy)
@@ -60,3 +60,16 @@
         except BaseException:    
             desc = 'Error Loading Work Group Description'
         return desc
+
+def get_group_ads_emails(wg):
+    " Get list of area directors' emails for a given WG "
+    return [wg.ad and wg.ad.user and wg.ad.user.email]
+
+def get_group_chairs_emails(wg):
+    " Get list of area chairs' emails for a given WG "
+    emails = Email.objects.filter(role__group=wg,
+                                  role__name='chair')
+    if not emails:
+        return
+    return [email and email.active and email.address for email in emails]
+
Index: bin/generate-draft-aliases
===================================================================
--- bin/generate-draft-aliases	(revision 0)
+++ bin/generate-draft-aliases	(revision 0)
@@ -0,0 +1,113 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+# -*- Python -*-
+#
+# $Id: generate-draft-aliases $
+#
+# Author: Markus Stenberg <markus.stenberg@iki.fi>
+#
+"""
+
+This code dumps Django model InternetDraft's contents as postfix email
+aliases
+
+<no suffix> (same as -authors)
+.authors (list of authors)
+.chairs (WG chairs)
+.notify (notify emails(?))
+.ad (sponsoring AD)
+.all (all of the above)
+
+TODO:
+
+- results somewhat inconsistent with the results from the old tool;
+  should examine why (ask me for diff tool if interested in fixing it)
+
+"""
+
+# boilerplate (from various other ietf/bin scripts)
+import os, sys
+basedir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
+sys.path = [ basedir ] + sys.path
+
+from ietf import settings
+from django.core import management
+management.setup_environ(settings)
+
+from ietf.doc.models import Document
+from ietf.group.utils import get_group_chairs_emails
+from aliasutil import *
+import time
+
+def get_draft_ad_emails(draft):
+    " Get AD email for the given draft, if any. "
+    ad = draft.ad
+    return [ad and ad.user and ad.user.email]
+
+def get_draft_authors_emails(draft):
+    " Get list of authors for the given draft."
+    return [email.address for email in draft.authors.all()]
+
+def get_draft_notify_emails(draft):
+    " Get list of email addresses to notify for the given draft."
+    n = draft.notify
+    if not n:
+        return
+    l = n.split(',')
+    return l
+
+if __name__ == '__main__':
+    import datetime
+    import time
+
+    year_ago = datetime.datetime.now() - datetime.timedelta(365)
+
+    modname = 'ietf.generate_draft_aliases'
+    date = time.strftime("%Y-%m-%d_%H:%M:%S")
+    print '# Generated by python -m %s at %s' % (modname, date)
+
+    drafts = Document.objects.all()
+
+    # Drafts with active status
+    active_drafts = drafts.filter(states__slug='active')
+
+    # Drafts that expired within year
+    inactive_recent_drafts = drafts.exclude(states__slug='active').filter(expires__gte=year_ago)
+
+    interesting_drafts = active_drafts | inactive_recent_drafts
+
+    for draft in interesting_drafts.distinct().iterator():
+        name = draft.name
+        done = []
+        all = []
+        def handle_sublist(name, f, o):
+            r = dump_sublist(name, f, o)
+            if r:
+                done.append(name)
+                all.extend(r)
+            return r
+        #.authors (/and no suffix) = authors
+
+        # First, do no suffix case
+        # If no authors, don't generate list either
+        r = dump_sublist(name, get_draft_authors_emails, draft)
+        if not r:
+            continue
+        handle_sublist('%s%s' % (name, '.authors'), get_draft_authors_emails, draft)
+        wg = draft.group
+        if wg:
+            # .chairs = WG chairs
+            handle_sublist('%s%s' % (name, '.chairs'), get_group_chairs_emails, wg)
+
+        # .ad = sponsoring AD
+        handle_sublist('%s%s' % (name, '.ad'), get_draft_ad_emails, draft)
+
+        # .notify = notify email list from the Document
+        handle_sublist('%s%s' % (name, '.notify'), get_draft_notify_emails, draft)
+
+        # .all = everything on 'done' (recursive aliases)
+        #dump_sublist('%s%s' % (name, '.all'), None, done)
+        # .all = everything on 'all' (expanded aliases)
+        dump_sublist('%s%s' % (name, '.all'), None, all)
+
+

Property changes on: bin/generate-draft-aliases
___________________________________________________________________
Added: svn:executable
   + *

Index: bin/aliasutil.py
===================================================================
--- bin/aliasutil.py	(revision 0)
+++ bin/aliasutil.py	(revision 0)
@@ -0,0 +1,69 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+# -*- Python -*-
+#
+# $Id: aliasutil.py $
+#
+# Author: Markus Stenberg <mstenber@cisco.com>
+#
+"""
+
+Mailing list alias dumping utilities
+
+"""
+
+def rewrite_email_address(email):
+    """ Prettify the email address (and if it's empty, skip it by
+    returning None). """
+    if not email:
+        return
+    email = email.strip()
+    if not email:
+        return
+    if email[0]=='<' and email[-1] == '>':
+        email = email[1:-1]
+    # If it doesn't look like email, skip
+    if '@' not in email and '?' not in email:
+        return
+    return email
+
+def rewrite_address_list(l):
+    """ This utility function makes sure there is exactly one instance
+    of an address within the result list, and preserves order
+    (although it may not be relevant to start with) """
+    h = {}
+    for address in l:
+        #address = address.strip()
+        if h.has_key(address): continue
+        h[address] = True
+        yield address
+
+def dump_sublist(alias, f, wg):
+    if f:
+        l = f(wg)
+    else:
+        l = wg
+    if not l:
+        return
+    # Nones in the list should be skipped
+    l = filter(None, l)
+
+    # Make sure emails are sane and eliminate the Nones again for
+    # non-sane ones
+    l = map(rewrite_email_address, l)
+    l = filter(None, l)
+
+    # And we'll eliminate the duplicates too but preserve order
+    l = list(rewrite_address_list(l))
+    if not l:
+        return
+    try:
+        print '%s: %s' % (alias, ', '.join(l))
+    except UnicodeEncodeError:
+        # If there's unicode in email address, something is badly
+        # wrong and we just silently punt
+        # XXX - is there better approach?
+        print '# Error encoding', alias, repr(l)
+        return
+    return l
+
Index: bin/generate-wg-aliases
===================================================================
--- bin/generate-wg-aliases	(revision 0)
+++ bin/generate-wg-aliases	(revision 0)
@@ -0,0 +1,53 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+# -*- Python -*-
+#
+# $Id: generate-wg-aliases $
+#
+# Author: Markus Stenberg <markus.stenberg@iki.fi>
+#
+"""
+
+This code dumps Django model IETFWG's contents as two sets of postfix
+mail lists: -ads, and -chairs
+
+"""
+
+# boilerplate (from various other ietf/bin scripts)
+import os, sys
+basedir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
+sys.path = [ basedir ] + sys.path
+
+from ietf import settings
+from django.core import management
+management.setup_environ(settings)
+
+from ietf.group.models import Group
+from ietf.group.utils import get_group_ads_emails, get_group_chairs_emails
+from ietf.person.models import Email
+from aliasutil import *
+
+if __name__ == '__main__':
+    import datetime
+    import time
+
+    year_ago = datetime.datetime.now() - datetime.timedelta(365)
+
+    modname = 'ietf.generate_wg_aliases'
+    date = time.strftime("%Y-%m-%d_%H:%M:%S")
+    print '# Generated by python -m %s at %s' % (modname, date)
+    wgs = Group.objects.filter(type='wg').all()
+
+    # We should list
+
+    # - status = Active
+    active_wgs = wgs.filter(state='active')
+
+    # - activity within last year? (use concluded_date)
+    inactive_recent_wgs = wgs.exclude(state='active').filter(time__gte=year_ago)
+    interesting_wgs = active_wgs | inactive_recent_wgs
+
+    for wg in interesting_wgs.distinct().iterator():
+        name = wg.acronym
+        dump_sublist('%s%s' % (name, '-ads'), get_group_ads_emails, wg)
+        dump_sublist('%s%s' % (name, '-chairs'), get_group_chairs_emails, wg)

Property changes on: bin/generate-wg-aliases
___________________________________________________________________
Added: svn:executable
   + *

